import { useState, useEffect, useCallback } from 'react';
import { ActiveTimer } from '@/types/ActiveTimer';
import { centralizedTimerService } from '@/services/centralizedTimerService';
import { timerLogger } from '@/utils/logger';

/**
 * Hook React r√©actif utilisant le service centralis√©
 * Hook principal pour la gestion des timers dans l'application
 */
// Variable statique pour √©viter les initialisations multiples
let isInitializing = false;

// Cl√© de stockage pour les timers √©ph√©m√®res
const EPHEMERAL_TIMERS_KEY = 'onyx_ephemeral_timers';

// TTL par d√©faut pour les timers √©ph√©m√®res (2 heures en millisecondes)
const EPHEMERAL_TIMER_TTL = 2 * 60 * 60 * 1000;

// Interface pour les m√©tadonn√©es des timers √©ph√©m√®res
interface EphemeralTimerMetadata {
  timer: ActiveTimer;
  createdAt: number;
  expiresAt: number;
  lastCleanupCheck: number;
}

export const useReactiveTimers = () => {
  const [timers, setTimers] = useState<ActiveTimer[]>([]);
  const [timerCounter, setTimerCounter] = useState(1);
  const [isLoaded, setIsLoaded] = useState(false);

  // √âviter les logs multiples dans le dev mode
  if (!isInitializing) {
    timerLogger.debug('Initialisation useReactiveTimers');
    isInitializing = true;
  }

  // Fonctions utilitaires pour les timers √©ph√©m√®res avec TTL am√©lior√©
  const loadEphemeralTimers = useCallback((): ActiveTimer[] => {
    try {
      const saved = localStorage.getItem(EPHEMERAL_TIMERS_KEY);
      if (!saved) return [];
      
      const now = Date.now();
      const ephemeralData = JSON.parse(saved) as EphemeralTimerMetadata[];
      
      // Filtrer les timers non expir√©s et valides
      const validData = ephemeralData.filter(data => {
        // V√©rifier l'expiration
        if (now > data.expiresAt) {
          console.log(`‚è∞ Timer √©ph√©m√®re expir√© supprim√©: ${data.timer.title}`);
          return false;
        }
        
        // V√©rifier la coh√©rence des donn√©es
        if (!data.timer || !data.timer.id || !data.timer.isEphemeral) {
          console.warn('‚ö†Ô∏è Donn√©es de timer √©ph√©m√®re corrompues supprim√©es');
          return false;
        }
        
        return true;
      });
      
      // Mettre √† jour le storage si des timers ont √©t√© nettoy√©s
      if (validData.length !== ephemeralData.length) {
        console.log(`üßπ ${ephemeralData.length - validData.length} timer(s) √©ph√©m√®re(s) expir√©(s) nettoy√©(s)`);
        saveEphemeralTimersMetadata(validData);
      }
      
      const validTimers = validData.map(data => data.timer);
      console.log('‚è±Ô∏è Timers √©ph√©m√®res charg√©s:', validTimers.length);
      return validTimers;
    } catch (error) {
      console.error('Erreur chargement timers √©ph√©m√®res:', error);
      // En cas d'erreur, nettoyer le localStorage corrompu
      localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
      return [];
    }
  }, []);
  
  // Sauvegarder les m√©tadonn√©es des timers √©ph√©m√®res avec TTL
  const saveEphemeralTimersMetadata = useCallback((metadata: EphemeralTimerMetadata[]) => {
    try {
      localStorage.setItem(EPHEMERAL_TIMERS_KEY, JSON.stringify(metadata));
    } catch (error) {
      console.error('Erreur sauvegarde m√©tadonn√©es timers √©ph√©m√®res:', error);
    }
  }, []);

  // Sauvegarder les timers √©ph√©m√®res avec m√©tadonn√©es TTL
  const saveEphemeralTimers = useCallback((ephemeralTimers: ActiveTimer[]) => {
    try {
      const now = Date.now();
      const metadata: EphemeralTimerMetadata[] = ephemeralTimers.map(timer => ({
        timer,
        createdAt: new Date(timer.createdAt).getTime(),
        expiresAt: now + EPHEMERAL_TIMER_TTL,
        lastCleanupCheck: now
      }));
      
      saveEphemeralTimersMetadata(metadata);
    } catch (error) {
      console.error('Erreur sauvegarde timers √©ph√©m√®res:', error);
    }
  }, [saveEphemeralTimersMetadata]);
  
  // Nettoyage forc√© des timers √©ph√©m√®res expir√©s (sans synchronisation automatique)
  const cleanupExpiredEphemeralTimers = useCallback(() => {
    try {
      const saved = localStorage.getItem(EPHEMERAL_TIMERS_KEY);
      if (!saved) return false; // Retourner false si aucun nettoyage effectu√©
      
      const now = Date.now();
      const ephemeralData = JSON.parse(saved) as EphemeralTimerMetadata[];
      
      const validData = ephemeralData.filter(data => {
        if (now > data.expiresAt) {
          console.log(`üßπ Nettoyage forc√© timer √©ph√©m√®re expir√©: ${data.timer.title}`);
          return false;
        }
        return true;
      });
      
      if (validData.length !== ephemeralData.length) {
        console.log(`üßπ ${ephemeralData.length - validData.length} timer(s) √©ph√©m√®re(s) forc√©ment nettoy√©(s)`);
        saveEphemeralTimersMetadata(validData);
        return true; // Retourner true si un nettoyage a √©t√© effectu√©
      }
      
      return false; // Aucun nettoyage n√©cessaire
    } catch (error) {
      console.error('Erreur nettoyage forc√© timers √©ph√©m√®res:', error);
      // En cas d'erreur, nettoyer compl√®tement
      localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
      return true; // Un nettoyage a √©t√© effectu√© (m√™me complet)
    }
  }, [saveEphemeralTimersMetadata]);
  
  // V√©rification de coh√©rence sp√©cifique aux timers √©ph√©m√®res
  const ensureEphemeralTimersConsistency = useCallback(async () => {
    try {
      console.log('üîç V√©rification coh√©rence des timers √©ph√©m√®res');
      
      const saved = localStorage.getItem(EPHEMERAL_TIMERS_KEY);
      if (!saved) {
        console.log('‚úÖ Aucun timer √©ph√©m√®re √† v√©rifier');
        return;
      }
      
      const now = Date.now();
      let ephemeralData: EphemeralTimerMetadata[];
      
      try {
        ephemeralData = JSON.parse(saved) as EphemeralTimerMetadata[];
        
        // V√©rifier que la structure est correcte
        if (!Array.isArray(ephemeralData)) {
          throw new Error('Structure de donn√©es invalide');
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è Donn√©es timers √©ph√©m√®res corrompues, nettoyage complet');
        localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
        return;
      }
      
      let hasChanges = false;
      const cleanedData: EphemeralTimerMetadata[] = [];
      
      for (const data of ephemeralData) {
        // V√©rifier la structure des m√©tadonn√©es
        if (!data.timer || !data.timer.id || !data.createdAt || !data.expiresAt) {
          console.warn(`‚ö†Ô∏è M√©tadonn√©es corrompues pour timer √©ph√©m√®re, suppression`);
          hasChanges = true;
          continue;
        }
        
        // V√©rifier que le timer est bien √©ph√©m√®re
        if (!data.timer.isEphemeral) {
          console.warn(`‚ö†Ô∏è Timer non-√©ph√©m√®re dans le storage √©ph√©m√®re: ${data.timer.title}`);
          hasChanges = true;
          continue;
        }
        
        // V√©rifier l'expiration
        if (now > data.expiresAt) {
          console.log(`‚è∞ Timer √©ph√©m√®re expir√© supprim√©: ${data.timer.title}`);
          hasChanges = true;
          continue;
        }
        
        // R√©initialiser la date d'expiration si elle semble incorrecte
        if (data.expiresAt - data.createdAt > EPHEMERAL_TIMER_TTL * 2) {
          console.log(`üîß Correction TTL pour timer √©ph√©m√®re: ${data.timer.title}`);
          data.expiresAt = data.createdAt + EPHEMERAL_TIMER_TTL;
          hasChanges = true;
        }
        
        cleanedData.push(data);
      }
      
      if (hasChanges) {
        console.log(`üîß ${ephemeralData.length - cleanedData.length} incoh√©rence(s) r√©par√©e(s) dans les timers √©ph√©m√®res`);
        saveEphemeralTimersMetadata(cleanedData);
      } else {
        console.log('‚úÖ Coh√©rence des timers √©ph√©m√®res v√©rifi√©e');
      }
      
    } catch (error) {
      console.error('Erreur v√©rification coh√©rence timers √©ph√©m√®res:', error);
      // En cas d'erreur majeure, nettoyer compl√®tement
      localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
    }
  }, [saveEphemeralTimersMetadata]);

  // Synchroniser depuis le service centralis√©
  const syncFromCentralizedService = useCallback(async () => {
    try {
      // Nettoyer d'abord les timers √©ph√©m√®res expir√©s
      const cleanupPerformed = cleanupExpiredEphemeralTimers();
      
      const centralizedTimers = centralizedTimerService.getTimers();
      const ephemeralTimers = loadEphemeralTimers();
      
      // Combiner les timers persist√©s et √©ph√©m√®res
      const allTimers = [...centralizedTimers, ...ephemeralTimers];
      
      console.log('üîÑ Synchronisation depuis service centralis√©:', {
        persist√©s: centralizedTimers.length,
        √©ph√©m√®res: ephemeralTimers.length,
        total: allTimers.length,
        nettoyage: cleanupPerformed ? 'effectu√©' : 'pas n√©cessaire'
      });
      
      setTimers(allTimers);
    } catch (error) {
      console.error('Erreur synchronisation:', error);
    }
  }, [loadEphemeralTimers, cleanupExpiredEphemeralTimers]);

  // Charger l'√©tat initial avec v√©rification de coh√©rence
  useEffect(() => {
    const loadInitialState = async () => {
      try {
        console.log('üìñ Chargement initial des timers avec v√©rification de coh√©rence');
        
        // Nettoyer les timers √©ph√©m√®res expir√©s AVANT le chargement
        cleanupExpiredEphemeralTimers();
        
        const savedCounter = localStorage.getItem('onyx_timer_counter');
        
        if (savedCounter) {
          const counter = parseInt(savedCounter, 10);
          console.log('üî¢ Compteur charg√©:', counter);
          setTimerCounter(counter);
        }
        
        // V√©rification de coh√©rence des donn√©es localStorage sera effectu√©e via cleanupExpiredEphemeralTimers
        
        // Synchroniser avec le service centralis√© et charger les timers √©ph√©m√®res
        await syncFromCentralizedService();
        setIsLoaded(true);
        
        console.log('‚úÖ Chargement initial termin√© avec succ√®s');
      } catch (error) {
        console.error('Erreur chargement initial:', error);
        setIsLoaded(true);
      }
    };

    loadInitialState();
  }, [syncFromCentralizedService, cleanupExpiredEphemeralTimers]);

  // Nettoyage p√©riodique des timers √©ph√©m√®res expir√©s
  useEffect(() => {
    // Nettoyer imm√©diatement au montage
    const initialCleanup = cleanupExpiredEphemeralTimers();
    if (initialCleanup) {
      // Programmer une synchronisation apr√®s le nettoyage initial
      setTimeout(() => syncFromCentralizedService(), 50);
    }
    
    // Puis nettoyer toutes les 30 secondes
    const cleanupInterval = setInterval(() => {
      console.log('üîÑ Nettoyage p√©riodique des timers √©ph√©m√®res');
      const cleanupPerformed = cleanupExpiredEphemeralTimers();
      if (cleanupPerformed) {
        // Programmer une synchronisation si un nettoyage a √©t√© effectu√©
        setTimeout(() => syncFromCentralizedService(), 50);
      }
    }, 30000); // 30 secondes
    
    return () => {
      clearInterval(cleanupInterval);
      console.log('üßπ Nettoyage p√©riodique des timers √©ph√©m√®res arr√™t√©');
    };
  }, [cleanupExpiredEphemeralTimers, syncFromCentralizedService]);

  // S'abonner aux changements du service centralis√© avec d√©bounce
  useEffect(() => {
    let syncTimeout: NodeJS.Timeout | null = null;
    let isComponentMounted = true;
    
    const unsubscribe = centralizedTimerService.subscribe(() => {
      // Annuler la synchronisation pr√©c√©dente si elle n'a pas encore eu lieu
      if (syncTimeout) {
        clearTimeout(syncTimeout);
        syncTimeout = null;
      }
      
      // Programmer une synchronisation avec un d√©lai pour √©viter les race conditions
      // Seulement si le composant est encore mont√©
      if (isComponentMounted) {
        syncTimeout = setTimeout(() => {
          if (isComponentMounted) {
            console.log('üîÑ Synchronisation depuis service centralis√© (d√©bounce)');
            syncFromCentralizedService();
          }
          syncTimeout = null;
        }, 50); // 50ms de d√©bounce
      }
    });

    return () => {
      console.log('üßπ useReactiveTimers - Nettoyage lors du d√©montage');
      isComponentMounted = false;
      
      // Nettoyer le timeout en cours
      if (syncTimeout) {
        console.log('üßπ Nettoyage du timeout de synchronisation');
        clearTimeout(syncTimeout);
        syncTimeout = null;
      }
      
      // D√©sabonner du service
      unsubscribe();
      console.log('‚úÖ useReactiveTimers - D√©sabonnement termin√©');
    };
  }, [syncFromCentralizedService]);

  // Sauvegarder le compteur quand il change
  useEffect(() => {
    if (!isLoaded) return;
    
    try {
      localStorage.setItem('onyx_timer_counter', timerCounter.toString());
    } catch (error) {
      console.error('Erreur sauvegarde compteur:', error);
    }
  }, [timerCounter, isLoaded]);

  /**
   * Ajouter un nouveau timer
   */
  const addTimer = useCallback(async (timer: Omit<ActiveTimer, 'id' | 'createdAt' | 'lastUsed'>) => {
    try {
      const newTimer: ActiveTimer = {
        ...timer,
        id: crypto.randomUUID(),
        createdAt: new Date(),
        lastUsed: new Date()
      };

      // Si le timer est √©ph√©m√®re, le persister temporairement dans localStorage
      if (newTimer.isEphemeral) {
        console.log('‚è±Ô∏è Timer √©ph√©m√®re cr√©√© (persist√© temporairement):', newTimer.title);
        // Ajouter √† l'√©tat local
        setTimers(prev => {
          const updatedTimers = [...prev, newTimer];
          // Sauvegarder uniquement les timers √©ph√©m√®res
          const ephemeralTimers = updatedTimers.filter(t => t.isEphemeral);
          saveEphemeralTimers(ephemeralTimers);
          return updatedTimers;
        });
      } else {
        // Timer normal - persister via le service centralis√©
        await centralizedTimerService.addTimer(newTimer);
      }
      
      return newTimer;
    } catch (error) {
      console.error('Erreur ajout timer:', error);
      throw error;
    }
  }, [saveEphemeralTimers]);

  /**
   * Mettre √† jour un timer existant
   */
  const updateTimer = useCallback(async (id: string, updates: Partial<Omit<ActiveTimer, 'id' | 'createdAt'>>) => {
    try {
      console.log(`üîÑ Mise √† jour timer ${id}`);
      
      // V√©rifier si c'est un timer √©ph√©m√®re
      const timer = timers.find(t => t.id === id);
      if (timer?.isEphemeral) {
        console.log('‚è±Ô∏è Mise √† jour timer √©ph√©m√®re (persist√© temporairement)');
        setTimers(prev => {
          const updatedTimers = prev.map(t => t.id === id ? { ...t, ...updates } : t);
          // Sauvegarder les timers √©ph√©m√®res mis √† jour
          const ephemeralTimers = updatedTimers.filter(t => t.isEphemeral);
          saveEphemeralTimers(ephemeralTimers);
          return updatedTimers;
        });
      } else {
        await centralizedTimerService.updateTimer(id, updates);
      }
    } catch (error) {
      console.error('Erreur mise √† jour timer:', error);
      throw error;
    }
  }, [timers, saveEphemeralTimers]);

  /**
   * Supprimer un timer avec nettoyage automatique du localStorage
   */
  const removeTimer = useCallback(async (id: string) => {
    try {
      // V√©rifier si c'est un timer √©ph√©m√®re
      const timer = timers.find(t => t.id === id);
      if (timer?.isEphemeral) {
        console.log('‚è±Ô∏è Suppression timer √©ph√©m√®re avec nettoyage localStorage');
        setTimers(prev => {
          const updatedTimers = prev.filter(t => t.id !== id);
          // Sauvegarder les timers √©ph√©m√®res restants
          const ephemeralTimers = updatedTimers.filter(t => t.isEphemeral);
          saveEphemeralTimers(ephemeralTimers);
          
          // Nettoyer imm√©diatement les timers expir√©s lors de la suppression
          setTimeout(() => {
            const cleanupPerformed = cleanupExpiredEphemeralTimers();
            if (cleanupPerformed) {
              // Forcer une re-synchronisation si un nettoyage a √©t√© effectu√©
              syncFromCentralizedService();
            }
          }, 100);
          
          return updatedTimers;
        });
        
        console.log(`‚úÖ Timer √©ph√©m√®re ${timer.title} supprim√© et localStorage nettoy√©`);
      } else {
        await centralizedTimerService.removeTimer(id);
      }
    } catch (error) {
      console.error('Erreur suppression timer:', error);
      throw error;
    }
  }, [timers, saveEphemeralTimers, cleanupExpiredEphemeralTimers, syncFromCentralizedService]);

  /**
   * Mettre √† jour la date de derni√®re utilisation
   */
  const updateTimerLastUsed = useCallback(async (id: string) => {
    try {
      await centralizedTimerService.updateTimer(id, { lastUsed: new Date() });
    } catch (error) {
      console.error('Erreur mise √† jour lastUsed:', error);
    }
  }, []);

  /**
   * Vider tous les timers
   */
  const clearAllTimers = useCallback(async () => {
    try {
      const currentTimers = centralizedTimerService.getTimers();
      for (const timer of currentTimers) {
        await centralizedTimerService.removeTimer(timer.id);
      }
    } catch (error) {
      console.error('Erreur suppression compl√®te:', error);
    }
  }, []);

  /**
   * Nettoyer les anciens timers
   */
  const cleanupOldTimers = useCallback(async () => {
    try {
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const currentTimers = centralizedTimerService.getTimers();
      const oldTimers = currentTimers.filter(timer => timer.lastUsed < thirtyDaysAgo);
      
      for (const timer of oldTimers) {
        await centralizedTimerService.removeTimer(timer.id);
      }
    } catch (error) {
      console.error('Erreur nettoyage timers:', error);
    }
  }, []);

  /**
   * NOUVELLES M√âTHODES - Fonctionnalit√©s avanc√©es du service centralis√©
   */

  /**
   * Lier un timer √† un cours
   */
  const linkTimerToSubject = useCallback(async (subjectId: string, timerId: string) => {
    try {
      await centralizedTimerService.linkTimerToSubject(subjectId, timerId);
    } catch (error) {
      console.error('Erreur liaison timer-cours:', error);
      throw error;
    }
  }, []);

  /**
   * D√©lier un timer d'un cours
   */
  const unlinkTimerFromSubject = useCallback(async (subjectId: string) => {
    try {
      await centralizedTimerService.unlinkTimerFromSubject(subjectId);
    } catch (error) {
      console.error('Erreur d√©liaison timer-cours:', error);
      throw error;
    }
  }, []);

  /**
   * Obtenir les timers disponibles pour liaison
   */
  const getAvailableTimersForSubject = useCallback((subjectId?: string) => {
    return centralizedTimerService.getAvailableTimersForSubject(subjectId);
  }, []);

  /**
   * Obtenir les timers li√©s √† un cours sp√©cifique
   */
  const getLinkedTimersForSubject = useCallback((subjectId: string) => {
    return centralizedTimerService.getLinkedTimersForSubject(subjectId);
  }, []);

  /**
   * V√©rifier et r√©parer la coh√©rence des donn√©es
   */
  const ensureDataConsistency = useCallback(async () => {
    try {
      await centralizedTimerService.ensureDataConsistency();
    } catch (error) {
      console.error('Erreur v√©rification coh√©rence:', error);
    }
  }, []);

  return {
    // Interface principale de gestion des timers
    timers,
    timerCounter,
    setTimerCounter,
    addTimer,
    updateTimer,
    removeTimer,
    updateTimerLastUsed,
    clearAllTimers,
    cleanupOldTimers,
    
    // Nouvelles fonctionnalit√©s avanc√©es
    linkTimerToSubject,
    unlinkTimerFromSubject,
    getAvailableTimersForSubject,
    getLinkedTimersForSubject,
    ensureDataConsistency,
    
    // √âtat de chargement
    isLoaded,
    
    // Fonctions utilitaires pour les timers √©ph√©m√®res
    loadEphemeralTimers,
    cleanupExpiredEphemeralTimers,
    ensureEphemeralTimersConsistency,
    clearEphemeralTimers: () => {
      localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
      console.log('üßπ Timers √©ph√©m√®res compl√®tement nettoy√©s du localStorage');
      // Forcer une synchronisation apr√®s le nettoyage complet
      syncFromCentralizedService();
    },
    
    // Fonction de maintenance compl√®te pour les timers √©ph√©m√®res
    performEphemeralTimersMaintenance: () => {
      console.log('üîß Maintenance compl√®te des timers √©ph√©m√®res');
      try {
        // 1. Nettoyer les timers expir√©s
        cleanupExpiredEphemeralTimers();
        
        // 2. V√©rifier la coh√©rence
        ensureEphemeralTimersConsistency();
        
        console.log('‚úÖ Maintenance des timers √©ph√©m√®res termin√©e');
      } catch (error) {
        console.error('Erreur lors de la maintenance des timers √©ph√©m√®res:', error);
        // En cas d'erreur critique, nettoyer compl√®tement
        localStorage.removeItem(EPHEMERAL_TIMERS_KEY);
        syncFromCentralizedService();
      }
    }
  };
};