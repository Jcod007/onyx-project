/**
 * üóÑÔ∏è StorageService
 * 
 * Service unifi√© pour tous les acc√®s localStorage avec gestion d'erreurs robuste
 * Remplace la logique dispers√©e dans 27+ fichiers
 */

import { timerLogger } from '@/utils/logger';

class StorageService {
  private static instance: StorageService;
  
  static getInstance(): StorageService {
    if (!StorageService.instance) {
      StorageService.instance = new StorageService();
    }
    return StorageService.instance;
  }
  
  /**
   * Sauvegarder des donn√©es avec gestion d'erreurs
   */
  save<T>(key: string, data: T): void {
    try {
      const serialized = JSON.stringify(data);
      localStorage.setItem(key, serialized);
      timerLogger.debug(`üíæ Sauvegarde r√©ussie: ${key}`);
    } catch (error) {
      timerLogger.error(`‚ùå Erreur sauvegarde ${key}:`, error);
      
      // Tentative de nettoyage si quota d√©pass√©
      if (error instanceof Error && error.name === 'QuotaExceededError') {
        this.cleanupOldData();
        // R√©essayer une fois
        try {
          localStorage.setItem(key, JSON.stringify(data));
          timerLogger.debug(`üíæ Sauvegarde r√©ussie apr√®s nettoyage: ${key}`);
        } catch (retryError) {
          timerLogger.error(`‚ùå √âchec d√©finitif sauvegarde ${key}:`, retryError);
        }
      }
    }
  }
  
  /**
   * Charger des donn√©es avec fallback
   */
  load<T>(key: string, defaultValue: T): T {
    try {
      const saved = localStorage.getItem(key);
      if (saved === null) {
        timerLogger.debug(`üìñ Cl√© non trouv√©e, utilisation valeur par d√©faut: ${key}`);
        return defaultValue;
      }
      
      const parsed = JSON.parse(saved) as T;
      timerLogger.debug(`üìñ Chargement r√©ussi: ${key}`);
      return parsed;
    } catch (error) {
      timerLogger.error(`‚ùå Erreur chargement ${key}:`, error);
      
      // Si les donn√©es sont corrompues, les supprimer
      try {
        localStorage.removeItem(key);
        timerLogger.debug(`üßπ Donn√©es corrompues supprim√©es: ${key}`);
      } catch (removeError) {
        timerLogger.error(`‚ùå Erreur suppression donn√©es corrompues ${key}:`, removeError);
      }
      
      return defaultValue;
    }
  }
  
  /**
   * Supprimer une cl√©
   */
  remove(key: string): void {
    try {
      localStorage.removeItem(key);
      timerLogger.debug(`üóëÔ∏è Suppression r√©ussie: ${key}`);
    } catch (error) {
      timerLogger.error(`‚ùå Erreur suppression ${key}:`, error);
    }
  }
  
  /**
   * V√©rifier si une cl√© existe
   */
  exists(key: string): boolean {
    try {
      return localStorage.getItem(key) !== null;
    } catch (error) {
      timerLogger.error(`‚ùå Erreur v√©rification existence ${key}:`, error);
      return false;
    }
  }
  
  /**
   * Obtenir toutes les cl√©s Onyx
   */
  getOnyxKeys(): string[] {
    try {
      const keys: string[] = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith('onyx_')) {
          keys.push(key);
        }
      }
      return keys;
    } catch (error) {
      timerLogger.error('‚ùå Erreur r√©cup√©ration cl√©s Onyx:', error);
      return [];
    }
  }
  
  /**
   * Nettoyage automatique des anciennes donn√©es
   */
  private cleanupOldData(): void {
    try {
      const keys = this.getOnyxKeys();
      const now = Date.now();
      const thirtyDaysAgo = now - (30 * 24 * 60 * 60 * 1000);
      
      // Supprimer les sessions de plus de 30 jours
      const sessionKeys = keys.filter(key => key.startsWith('onyx_sessions_'));
      for (const key of sessionKeys) {
        const dateStr = key.replace('onyx_sessions_', '');
        const sessionDate = new Date(dateStr).getTime();
        if (sessionDate < thirtyDaysAgo) {
          this.remove(key);
        }
      }
      
      timerLogger.debug(`üßπ Nettoyage automatique termin√©: ${sessionKeys.length} cl√©s v√©rifi√©es`);
    } catch (error) {
      timerLogger.error('‚ùå Erreur nettoyage automatique:', error);
    }
  }
  
  /**
   * Obtenir les statistiques de stockage
   */
  getStorageStats(): {
    totalKeys: number;
    onyxKeys: number;
    estimatedSize: number;
  } {
    try {
      const totalKeys = localStorage.length;
      const onyxKeys = this.getOnyxKeys();
      
      // Estimation de la taille (approximative)
      let estimatedSize = 0;
      for (const key of onyxKeys) {
        const value = localStorage.getItem(key);
        if (value) {
          estimatedSize += key.length + value.length;
        }
      }
      
      return {
        totalKeys,
        onyxKeys: onyxKeys.length,
        estimatedSize
      };
    } catch (error) {
      timerLogger.error('‚ùå Erreur calcul statistiques stockage:', error);
      return {
        totalKeys: 0,
        onyxKeys: 0,
        estimatedSize: 0
      };
    }
  }
  
  /**
   * Nettoyer compl√®tement toutes les donn√©es Onyx (pour debug/reset)
   */
  clearAllOnyxData(): void {
    try {
      const keys = this.getOnyxKeys();
      for (const key of keys) {
        this.remove(key);
      }
      timerLogger.debug(`üßπ Nettoyage complet: ${keys.length} cl√©s supprim√©es`);
    } catch (error) {
      timerLogger.error('‚ùå Erreur nettoyage complet:', error);
    }
  }
}

export const storageService = StorageService.getInstance();

// Constantes pour les cl√©s de stockage
export const STORAGE_KEYS = {
  ACTIVE_TIMERS: 'onyx_active_timers',
  TIMER_SYNC_METADATA: 'onyx_timer_sync_metadata',
  EPHEMERAL_TIMERS: 'onyx_ephemeral_timers',
  TIMER_COUNTER: 'onyx_timer_counter',
  SOUND_ENABLED: 'onyx_sound_enabled',
  THEME: 'onyx-theme',
  CALENDAR_VIEW_STATE: 'calendarViewState',
  LAST_RESET: 'onyx_last_reset'
} as const;

// Fonction utilitaire pour les cl√©s de sessions avec date
export const getSessionKey = (date: Date = new Date()): string => {
  return `onyx_sessions_${date.toDateString()}`;
};